{"version":3,"sources":["components/Text.jsx","components/BigButton.jsx","components/Counter.jsx","App.js","serviceWorker.js","index.js"],"names":["Text","content","this","props","react_default","a","createElement","className","Component","BigButton","action","text","onClick","toUpperCase","Counter","count","App","state","increaseCount","_this","setState","resetCount","components_Text","components_BigButton","components_Counter","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yNAYeA,0LARF,IACGC,EAAYC,KAAKC,MAAjBF,QACR,OACIG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAASN,UALhBO,cCYJC,EAZG,SAACN,GAAU,IAEjBO,EAAiBP,EAAjBO,OAAQC,EAASR,EAATQ,KAChB,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYK,QAASF,GAClCC,EAAKE,iBCCPC,EAPC,SAACX,GAAU,IACfY,EAAUZ,EAAVY,MACR,OACIX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAYQ,ICuCnBC,6MArCbC,MAAQ,CACNF,MAAO,KAsBTG,cAAgB,WACdC,EAAKC,SAAS,CACZL,MAAOI,EAAKF,MAAMF,MAAQ,OAI9BM,WAAa,WACXF,EAAKC,SAAS,CACZL,MAAO,6EA1BT,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACgB,EAAD,CAAMrB,QAAS,qBACfG,EAAAC,EAAAC,cAACiB,EAAD,CAAWb,OAAQR,KAAKgB,cAAeP,KAAK,cAE9CP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACgB,EAAD,CAAMrB,QAAQ,UACdG,EAAAC,EAAAC,cAACkB,EAAD,CAAST,MAAOb,KAAKe,MAAMF,SAE7BX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACgB,EAAD,CAAMrB,QAAS,kBACfG,EAAAC,EAAAC,cAACiB,EAAD,CAAWb,OAAQR,KAAKmB,WAAYV,KAAK,yBAlBjCc,IAAMjB,WCMlBkB,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCR,SAASC,EAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,KAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBxB,QACbkB,UAAUC,cAAcQ,YAIxBC,QAAQC,IACJ,iHAKAZ,GAAUA,EAAOa,UACjBb,EAAOa,SAASR,KAMpBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACjBd,EAAOc,UAAUT,UAOxCU,MAAM,SAAAC,GACHL,QAAQK,MAAM,4CAA6CA,KC1FvEC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBrB,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAIqB,IAAIC,GAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIrC,OAGJ/B,OAAOgC,iBAAiB,OAAQ,WAC5B,IAAM3B,EAAK,GAAA4B,OAAMJ,GAAN,sBAEP/B,GAgEhB,SAAiCO,EAAOC,GAEpC4B,MAAM7B,GACDK,KAAK,SAAAyB,GAEF,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEjB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GAC/BA,EAAa+B,aAAahC,KAAK,WAC3BV,OAAOC,SAAS0C,aAKxBvC,EAAgBC,EAAOC,KAG9Be,MAAM,WACHJ,QAAQC,IACJ,mEArFA0B,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WAC/BO,QAAQC,IACJ,gHAMRd,EAAgBC,EAAOC,MCvCvCE","file":"static/js/main.0c045bbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Text extends Component {\n\n    render() {\n        const { content } = this.props\n        return (\n            <h1 className=\"Text\" >{content}</h1>\n        )\n    }\n}\n\nexport default Text;","import React from 'react';\n\nconst BigButton = (props) => {\n\n    const { action, text } = props\n    return (\n        <div>\n            <button className=\"BigButton\" onClick={action}>\n                {text.toUpperCase()}\n            </button>\n        </div>\n    )\n}\n\nexport default BigButton;","import React from 'react';\n\nconst Counter = (props) => {\n    const { count } = props;\n    return (\n        <h1 className=\"Counter\" >{count}</h1>\n    )\n}\n\nexport default Counter;","import React from 'react';\nimport './App.scss';\nimport Text from './components/Text';\nimport BigButton from './components/BigButton';\nimport Counter from './components/Counter';\n\nclass App extends React.Component {\n  state = {\n    count: 0\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <Text content={\"Fabulous Counter\"} />\n          <BigButton action={this.increaseCount} text=\"Press me\" />\n        </div>\n        <div className=\"calendar\">\n          <Text content=\"Count\" />\n          <Counter count={this.state.count} />\n        </div>\n        <div className=\"updatePoster\">\n          <Text content={\"Update Poster\"} />\n          <BigButton action={this.resetCount} text=\"reset count\" />\n        </div>\n      </div>\n    )\n  }\n\n  increaseCount = () => {\n    this.setState({\n      count: this.state.count + 1\n    })\n  }\n\n  resetCount = () => {\n    this.setState({\n      count: 0\n    })\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}